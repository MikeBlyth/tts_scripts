FollowerGroup = {}
AllFollowerGroups = {}

function FollowerGroup:new(p)
-- {target=Obj, followers={obj1, obj2...}, spacing=Vector}
-- objects will be spaced at the "spacing" interval from the target
-- (target fields of Followers are somewhat redundant within a group, since the whole group will have same target object)
  defaults = {spacing = Vector(2,0,0)}
  local params = mergeTables(defaults, p)
  local obj = {}
  local target = params.target
  setmetatable(obj, self)
  self.__index = self
  self.__tostring = self.tostring
  print(type(target), ' ', target.getPosition())
  assert(type(target)=='userdata' and target.getPosition(), "FollowerGroup:new requires real target")
  obj.target = target
  obj.spacing = params.spacing
  obj.followers = {}
  if params.followers then obj:add(params.followers) end
  table.insert(AllFollowerGroups, obj)
  return obj
end

function FollowerGroup:add(objects)
  -- allow arg to be either singular object or an array
  if objects.getPosition then
	newobjects = {objects}  -- means it's a single object, not an array
  else
	newobjects = objects
  end
  for _, obj in ipairs(newobjects) do
    table.insert(self.followers, {object=obj})
  end
end

function FollowerGroup:update()
  for i,f in ipairs(self.followers) do
    f.object.setPosition(self.target.getPosition()+self.spacing*(i))
    f.object.setRotation(self.target.getRotation())
  end
end

function updateAllFollowerGroups()
  if AllFollowerGroups then
    for _, fg in ipairs (AllFollowerGroups) do
      fg:update()
    end
  end
end

--- to make it work, just add 'updateAllFollowerGroups()' to main (global) onUpdate()

-- to stop the FollowerGroup from working, just set it to nil
