FollowerGroup = {}
AllFollowerGroups = {objects={}}

function AllFollowerGroups.contains(object)
  guid = toGUID(object) -- takes either a GUID or an object
   return AllFollowerGroups.objects[guid]
end

function AllFollowerGroups.tostring(afo)
    s = ''
    for _, fg in ipairs(afg) do s = s .. FollowerGroup.tostring(fg) .. '\n' end
    return s
end
makePrintable(AllFollowerGroups)
afg = AllFollowerGroups

function AllFollowerGroups.empty()
    for i,_ in ipairs(AllFollowerGroups) do
        AllFollowerGroups[i] = nil
    end
end

function FollowerGroup:new(p)
-- {target=Obj, followers={obj1, obj2...}, spacing=Vector}
-- objects will be spaced at the "spacing" interval from the target
-- (target fields of Followers are somewhat redundant within a group, since the whole group will have same target object)
  local defaults = {spacing = Vector(2,0,0)}
  local params = mergeTables(defaults, p)
  local target = params.target
  local followers = params.followers
  local spacing = params.spacing
  local obj = {}
  setmetatable(obj, self)
  self.__index = self
  self.__tostring = self.tostring
  assert(target.getPosition,
    "FollowerGroup:new requires real target")
  obj.target = target.getGUID()
  AllFollowerGroups.objects[target.getGUID()]='t'  -- flag this object as a FG target/leader
  obj.spacing = Vector(spacing)
  obj.followers = {}
  -- target.auto_raise = false  -- doesn't seem to help
  if followers then obj:add(followers) end
  table.insert(AllFollowerGroups, obj)
  return obj
end

function FollowerGroup:add(objects)
  -- allow arg to be either singular object or an array
  if objects.getGUID then newobjects = {objects}  -- means it's a single object, not an array
  else newobjects = objects
  end
  for _, obj in ipairs(newobjects) do
    local guid = obj.getGUID()
    if not AllFollowerGroups.contains(guid) then  -- don't add i
      obj.setLock(true)  -- have to do this to keep stable
      --obj.auto_raise = false  -- doesn't seem to help
      table.insert(self.followers, guid)
      AllFollowerGroups.objects[guid]='f'  -- flag as FG follower
    end
  end
end

function FollowerGroup:update()
  local obj
  local target = getObjectFromGUID(self.target)
  if target == nil then self.followers = {} end  -- essentially nils a leaderless group
  for i,guid in ipairs(self.followers) do
    obj = getObjectFromGUID(guid)
    if obj then -- some edge cases may have lost obj in a bag or whatever
        -- local fudgeV = target.getVelocity()
        -- local fudge = fudgeV:magnitude()/80
        --local vy = target.getVelocity().y
        --if math.abs(vy) > 50 then print('!', vy) end
        local newPos = target.getPosition()+self.spacing*(i)
        obj.setPosition(newPos)
        obj.setRotation(target.getRotation())
        obj.setVelocity(target.getVelocity())
    end
  end
  return true
end

function updateAllFollowerGroups()
  if AllFollowerGroups then
    for _, fg in ipairs (AllFollowerGroups) do
      fg:update()
    end
  end
end

function FollowerGroup.removeFromAllFollowerGroups(target)  -- remove the FG with target (object or GUID accepted)
  -- removes the matching FG from All... and also destroys that matching FG
    local guid = toGUID(target)
    for i, fg in ipairs(AllFollowerGroups) do
        if fg.target == guid then   -- this is the fg to remove
            local removed = table.remove(AllFollowerGroups, i)
            AllFollowerGroups.objects[guid] = nil
            for _,f in ipairs(removed.followers) do
              getObjectFromGUID(f).setLock(false)
              AllFollowerGroups.objects[f] = nil -- f.object is follower object itself
            end
            fg = nil -- destroy the FG itself
            return true
        end
    end
    return nil
end

function FollowerGroup.tostring(fg)
  s = 'FollowerGroup: leader='
  s = s .. fg.target .. '; followers={'
  for _, f in ipairs(fg.followers) do
    s = s .. f .. ', '
  end
  s = s .. '}'
  return s
end
