#include util
#include dice
#include markup
#include buttons
--=============================================

function onLoad()
    print(bbcodes.Red, '\n\nStarting')
    math.randomseed( os.time())
    activeCards = {1,2,3,4,5,6,7,8}  -- default, for 8 players
    rowStart = 0.27
    rowHeight = 1.65
    colStart = 0.65
    colWidth = 1.30
    boardHeight = 1.5  -- Board height ... not sure why, but this works
    boardExtent = Vector(16.73, 5.0, 9.88)
    scriptingZoneHeight = 2.1
    deg2rad = math.pi/180
    zones = {
            {rotation=-90, base=Vector(-26.02, boardHeight, -14.78)},
            {rotation=-90, base=Vector(10.31, boardHeight, -14.37)},
            {rotation=0, base=Vector(31.64, boardHeight, -18.78)},
            {rotation=0, base=Vector(31.64, boardHeight, 3.34)},
            {rotation=0, base=Vector(26.22, boardHeight, 15.04)},
            {rotation=0, base=Vector(-9.66, boardHeight, 15.04)},
            {rotation=0, base=Vector(-32.97, boardHeight, 20.59)},
            {rotation=0, base=Vector(-33.13, boardHeight, -1.28)},
            }
    worldToSheetMatrix = {     -- conversion matrix for world vector to sheet vector
        {{1,0,0}, {0,1,0}, {0,0, -1}},
        {{1,0,0}, {0,1,0}, {0,0, -1}},
        {{0,0,1}, {0,1,0}, {1,0,0}},
        {{0,0,1}, {0,1,0}, {1,0,0}},
        {{-1,0,0}, {0,1,0}, {0,0,1}},
        {{-1,0,0}, {0,1,0}, {0,0,1}},
        {{0,0,-1}, {0,1,0}, {-1,0,0}},
        {{0,0,-1}, {0,1,0}, {-1,0,0}},
    }

    locked = {false, false, false, false}
    defaultButtonColor = {0.5, 0, 0.5}
    scoreTable = {0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78 }
    turnNumber = 0
    gameOver = false
    boards = {} -- virtual player boards
    cardsGUIDs = {'10cc96', '41d766', 'ebdc5e', '064eea', '7223ad', 'a645d1', '7ca978', 'da26a4'}
    bowls = {'34a199', '0ec9ea', '655015', '9eeedb', 'ad7483', '369874', '693944', 'c106f1'}
    cards2Zones = {['10cc96']= 1, ['41d766']=2, ['ebdc5e']=3, ['064eea']=4, ['7223ad']=5, ['a645d1']=6, ['7ca978']=7, ['da26a4']=8}
      -- if for some reason cards are ever replaced, new GUID's will need to be entered into above table!
    cards = {} -- ordered list of actual cards (board objects showing the scoring cards)
    for _, guid in ipairs(cardsGUIDs) do
        table.insert(cards, getObjectFromGUID(guid))
    end
    UI.setAttribute('playerNum', 'active', true) -- put up menu to select number of players
    eraseScriptingZones()  -- erases the zones themselves as they may have been saved and loaded
    createZones()
    setAllSnaps()
    makeBoards() -- create boards to store in the boards table
    initializeDice()
    initBoardConstants()
    Wait.condition(function() startTurn() end, function() return playerCount ~= nil end)
    cx = cards[1] -- just for easy debugging on command line
end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
end

function setPlayerCount(dummy, count) -- called by UI buttons on load
    local cardsUsed = {  -- choosing score cards to use for given number of players
        {1},
        {1, 5},
        {1, 2, 5},
        {1, 2, 5, 6},
        {1, 2, 3, 5, 6},
        {1, 2, 3, 5, 6, 7},
        {1, 2, 3, 4, 5, 6, 7},
        {1, 2, 3, 4, 5, 6, 7, 8},
    }
    local cardsDelete = { -- complement of ones to keeping
        {2, 3, 4, 5, 6, 7, 8},
        {2, 3, 4, 6, 7, 8},
        {3, 4, 6, 7, 8},
        {3, 4, 7, 8},
        {4, 7, 8},
        {4, 8},
        {8},
        {}
    }
    playerCount = tonumber(count)
    for _, c in ipairs(cardsDelete[playerCount]) do
        showCard(c, false)
    end
    for _, c in ipairs(cardsUsed[playerCount]) do
        showCard(c, true)
    end
    activeCards = cardsUsed[playerCount]
    UI.setAttribute('playerNum', 'active', false)
end

function showCard(cardNo, show)  -- show by putting it in a viewable position
    local card = getObjectFromGUID(cardsGUIDs[cardNo])
    local posCard = card.getPosition()
    local y = -10
    if show then y = 0.98 end
    card.setPosition({posCard.x, y, posCard.z})
end

function onObjectDrop(colorName, obj)
    -- local pos = obj.getPosition()
    -- print ('-- a ', obj.tag)
    -- printPosition(pos, '')
    -- shPos = toSheet(pos, zone)
    -- printPosition(shPos, 'sheet pos=')
    -- row, col = rowCol(shPos)
    -- print ('row=' .. row, 'col=', col)
end

boardHeight = 1.5  -- Board height ... not sure why, but this works

function rowCol(shPos)  -- return row/col from a sheet position
    rowNum = math.floor((shPos.z - rowStart)/rowHeight) + 1
    colNum = math.floor((shPos.x - colStart)/colWidth) + 1
    return rowNum, colNum
end

function rowCol2shPos(row, col)   -- returns LOCAL (Sheet) position
    local z = rowStart + (row-0.5)*rowHeight
    local x = colStart + (col-0.5)*colWidth
    return Vector(x, boardHeight, z)
end

function rowCol2Pos(n, row, col)   -- returns WORLD position for row-col in sheet n
--print('n, row, col=', dump({n, row, col}))
    return toWorld(rowCol2shPos(row, col), n)
end

function toSheet(v, n) -- convert world position to vector for sheet n
    local mat = worldToSheetMatrix[n]
    -- keep it simple strategy
    local x2, z2, origin
    local delta = v - zones[n].base
    x2 = delta.x*mat[1][1] + delta.z*mat[1][3]
    z2 = delta.x*mat[3][1] + delta.z*mat[3][3]
    return (Vector(x2, v.y, z2))
end

function toWorld(v, n) -- convert a sheet-local vector to a world Vector
    local mat = worldToSheetMatrix[n]
    -- keep it simple strategy
    local x2, z2, origin
    x2 = v.x*mat[1][1] + v.z*mat[1][3]
    z2 = v.x*mat[3][1] + v.z*mat[3][3]
    local delta = Vector(x2, 0, z2)
    return Vector((zones[n].base + delta))
end

function createZones()
    scriptingZones = {}  -- will keep zones in this array in order
    print('createZones')
    for i, _ in ipairs(zones) do
        local rotations = {0, 0, 90, 90, 0, 0, 90, 90}
        spawnParams = {
        type = 'ScriptingTrigger',
        rotation = Vector(0, rotations[i], 0),
        position          = toWorld(boardExtent * 0.5, i),
        scale             = {x=boardExtent[1], y=scriptingZoneHeight, z=boardExtent[3]},
        callback_function = function(obj) spawn_zone_callback(obj, i) end
        }
        thisZone = spawnObject(spawnParams)
        thisZone.setName('Zone ' .. i)
        table.insert(scriptingZones, thisZone)
    end
end

function eraseScriptingZones()
    allobj = getAllObjects() -- global object
    for _, o in ipairs(allobj) do
        if (o.tag == 'Scripting') then o.destruct() end
    end
end

function spawn_zone_callback()
end
-----============== ENTER SCRIPTING ZONE =================================
function onObjectEnterScriptingZone(zone, obj)  -- when any object enters the card area, scripting zone
    if obj.tag ~= 'GoPiece' then return end
    if (zone == lastZone) and (obj == lastObj) then return end  -- b/o double calls for same event
    lastZone = zone
    lastObj = obj
    Wait.time(function() lastObj=nil end, 0.5) -- only block same obj/zone pair for 0.5 seconds
        -- TTS bug causes onObjectEnterScriptingZone to be called twice, so we have to block 2nd time
    local player = tonumber(string.match(zone.getName(), '(%d)'))
    assert(player, "Zone with name" .. zone.getName() .. ' does not have valid number.')
    if not diceRolled then
        printMessage(player, 'Roll the dice first!', {duration=3})
        obj.setPositionSmooth(markerHome(player), true, false)
        return
    end
    --print(obj.tag .. ' entered ', zone.getName())
    local objPos = obj.getPosition()
    local shPos = toSheet(objPos, player)
    local row, col = rowCol(shPos)
    --setSnapInBox(player, row, col)
    if row == 5 then
        if col > 9 and player == activePlayer then -- error boxes
            if boards[player].penaltyThisTurn > 0 then
                printMessage(player, 'Why take another penalty\non the same turn?!',
                {duration=3.0, width=8000, font_size=500})
                obj.setPositionSmooth(markerHome(player), true, false)
            end
            obj.setScale({0.7, 0.7, 0.7})
            boards[player]:addPenalty(obj)
        else
            obj.setPositionSmooth(markerHome(player), true, false)
        end
    else
        local result = boards[player]:setBox(row, col, obj)  -- mark the play in the virtual board
        if result == false then
            obj.setPositionSmooth(markerHome(player), true, true)
        end
    end
    --print('Sheet=' .. player .. ', row=' .. row .. ', col=' .. col)
    --printPosition(shPos, 'sheetPos=')
end

-----============== LEAVE SCRIPTING ZONE =================================
function onObjectLeaveScriptingZone(zone, obj)
    -- ONLY the LAST marker is unlocked and can be removed, i.e. undos occur in reverse order of actions
    if obj.tag ~= 'GoPiece' then return end
    local zoneNo = tonumber(string.match(zone.getName(), '(%d)'))
    --print(obj.tag, 'is leaving ', zone.getName())
    obj.highlightOff()
    local board = boards[zoneNo]
    board:exitingMarker(obj)
end


----=========== SNAPS ==================
function setSnapInBox(zoneNo, row, col)
    local y = rowStart + (row-0.5)*rowHeight
    local x = colStart + (col-0.5)*colWidth
    local w = toWorld(Vector(x,0,y), zoneNo)
    Global.setSnapPoints({ {position=w} })
end

function setAllSnaps()
    local points = {}
    --print('set all snaps ...')
    local x, z, w
    for zoneNo = 1, 8 do
        for row = 1, 4 do
            for col = 1, 12 do
                z = rowStart + (row-0.5)*rowHeight
                x = colStart + (col-0.5)*colWidth
                local w = toWorld(Vector(x,0,z), zoneNo)
                table.insert(points, {position=w})
            end
        end
        table.insert(points, {position = toWorld(Vector(12.95, 0, 7.85), zoneNo)} )  -- penalty boxes
        table.insert(points, {position = toWorld(Vector(13.66, 0, 7.85), zoneNo)} )
        table.insert(points, {position = toWorld(Vector(14.29, 0, 7.85), zoneNo)} )
        table.insert(points, {position = toWorld(Vector(14.95, 0, 7.85), zoneNo)} )
    end
    -- Penalty boxes
    Global.setSnapPoints(points)
    --print('done')
end
---==== DICE ===========
function initializeDice()
    allDice = DiceSet:new() --
    local ttsDice = findDice()  -- table of all the dice objects
    for _, d in ipairs(ttsDice) do
        local newDie = Die:new(d)  -- make Lua Die
        allDice:add(newDie)
    end
    -- Now allDice is the dice collection (DiceSet)
    --allDice:roll()
end

function rollDice(x, y, fast)
    diceRolled = true
    allDice:roll(nil, fast)
end

function DiceSet:onRolled()  -- overrides default onRolled function
    -- printNotes("Results of dice set ", self,  '=' )
    -- printNotes(dump(self.results))
    removeRollButton(activePlayer)
    analyzeAndMark()
end

function analyzeAndMark()  -- analyze possible moves for all boards, mark the cards
    Markup:clear()
    calculatePossibleChoices()
    markBlockedSquares()
    markOKSquares()
    Markup:render(Global)
end

function calculatePossibleChoices(player)
    -- actually all this currently does is call calculateOK for each card
    local cards = activeCards
    if player then cards = {player} end -- to only do one card (for active player placing 2nd piece)
    for _, p in ipairs(cards) do -- for each player/card
        boards[p]:calculateOK(allDice.results)

        if false then
            --print('Choices for board ', p)
            --printChoices(boards[p].ok)
        end
    end
    --boards[1]:dump()
end

function usingWhiteDice(n)
    -- pdump(allDice.results,'Dice')
    local whiteSum = allDice.results.White[1] + allDice.results.White[2]
    return n == whiteSum
end

--======== PLAYERS/TURNS =====================
function startTurn()
    turnNumber = turnNumber + 1 -- global
    roundNumber = (turnNumber % playerCount) + 1 -- global
    activePlayerIndex = activePlayerIndex or math.random(1, playerCount)
    activePlayerIndex = (activePlayerIndex % playerCount) + 1
    activePlayer = activeCards[activePlayerIndex] --  e.g., activeCards might be {1,2,5,6} for 4 players (global)
    --print('API =', activePlayerIndex, ', playerCount =', playerCount, ', player=', activePlayer)
    attachButtons() -- this no longer has to be done each turn, but it's easy to do here
    diceRolled = false -- global
    readyCount = 0 -- global
    checkLocked() -- mark row as locked if it has been set as pending - also calls gameOver
    if gameOver then doGameOver() end -- global
    activeCard = getObjectFromGUID(cardsGUIDs[activePlayer]) -- Global
    activeCard.highlightOn('Yellow')
    printNotes('Starting turn for player ' .. activePlayerIndex)

    bx = boards[1] -- only for DEBUGGING
    cx = cards[1]  -- only for DEBUGGING
    playerMessageButton(activePlayer, 'Your turn', {color='Green', duration=2.0})
    spawnMarkers()
end

function endTurn()
    -- do something
    activeCard.highlightOff()
    removeCardButtons()
    -- delete all unlocked
    local objs = getAllObjects()
    for _, o in ipairs(objs) do
        if (o.tag=='GoPiece') and (o.getLock()==false) then o.destruct() end
    end
    Markup:clear()
    startTurn()
end

function doGameOver()
    print('Game over')
    printNotes( '**** Game is Over!! **')
    UI.setAttribute('gameOver', 'active', true)
    -- make a sound
end

function closeGameOver()
    UI.setAttribute('gameOver', 'active', false)
end
---========= BUTTONS AND BOARDS (Player Cards) ==================================================

--[[function attachButtons() -- OLD VERSION BEFORE BUTTONS OBJECTS UNIT
    for _, c in ipairs(activeCards) do  -- use only the active cards for this number of players
        local card = cards[c]  -- the object itself, player board
        local button_parameters = {id = 'ready', click_function = 'ready', label = 'Done',
                position = {11,1,-2}, rotation = {0,0,0}, width = 2000, height = 1000, font_size = 700,
                color = {0.5,0,0.5},font_color = {1,1,1} }
        card.createButton(button_parameters)
        attachScoreButtons(card, c)
        attachClueButtons(card)
    end
    buttonCount = 1  -- how many buttons attached to all boards; roll button is extra
end
--]]

function attachButtons()
    for i, p in ipairs(activeCards) do  -- use only the active cards for this number of players
        local board = boards[p]  -- the object itself, player board
        board:attachButton(readyButton())
        board:attachButton(clueButton())
        attachScoreButtons(board)
        if p == activePlayer then board:attachButton(rollButton()) end
    end
end

function readyButton(params)
    return Button:new('ready', {click_function = 'ready', label = 'Done', position = Vector(11,1,-2),})
end

function rollButton()  -- attach to one card
    local parameters = {click_function = 'rollDice', label = 'Roll', position = Vector(11,2,2.0),}
    if roundNumber < 3 then parameters.tooltip = 'Right-click for fast roll' end
    return Button:new('rollButton', parameters)
end

function clueButton()
    local parameters = {click_function = 'toggleClues', label='Show moves',
            position = Vector(-5, 0.7,8), width = 2450, height = 600, font_size = 400,}
    local button = Button:new('clueButton', parameters)
    button:setToggleParams({state=false,
                            off={color=defaultButtonColor, label='Show moves'},
                            on={color={0.5, 0.3, 0}, label='Hide moves'}
                            })
    return button
end

function attachScoreButtons(board)
    local scores = board:score()
    local button, id
    local parameters = {click_function = 'doNothing',
            position = Vector(-6.2,0.7,6.5), width = 450, height = 600, font_size = 300,
            color = 'White', font_color = {0,0,0} }
    for i=1, 6 do
      if i==6 then -- the total score button is a bit different in spacing and size
          parameters.position.x = 2.9
          parameters.width = 800
      end
      parameters.label = (scores[i] or 0)  -- insert the actual score
      id = 'score' .. i
      button = Button:new(id, parameters)
      board:attachButton(button)
      parameters.position.x = parameters.position.x + 1.68
    end
end

function doNothing()
end

function toggleClues(card) -- toggle whether possible moves should be marked on the card
    if not diceRolled then return end
    local board=card2Board(card)
    local clueB = board.buttons:get('clueButton')
    clueB:toggleState()
    board.showHints = clueB.state
    --print("Board ", board.player, ' showhints=', board.showHints)
    analyzeAndMark()
end

function card2Player(card)
    return cards2Zones[card.getGUID()]
end

function card2Board(card)
    return boards[cards2Zones[card.getGUID()]]
end


function removeRollButton(n)  -- should always be the last one placed to make it easily removable
    local board = boards[n]
    --print ('removeRollButton(', n, ')')
    board.buttons:remove('rollButton')  -- assumes Roll will be the last button!
end

function removeCardButtons()
    for _, p in ipairs(activeCards) do  -- use only the active cards for this number of players
        boards[p].buttons:removeAll()
    end
end

--[[ -- This is the old function
function removeCardButtons()
for _, c in ipairs(activeCards) do  -- use only the active cards for this number of players
    local card = cards[c]
    local buttonCount = #card.getButtons()
    for i=0, buttonCount-1 do
        card.removeButton(i)
    end
end
--]]

function checkIfActivePlayedPiece(player)  -- if player == active then  don't let them forget to move or take penalty
    if player ~= activePlayer then
        return true
    end -- doesn't matter, not the active player
    local board = boards[player]
    if board.markedThisTurn>0 or board.penaltyThisTurn > 0 then
        return true
    end
    printMessage(player, 'You have not played this turn.\nMark a square or take a penalty.',
            {width=10000, duration=4.0})
    local button = board.buttons:get('ready')
    button:edit({color='Orange'})
    return false
end

function ready(card)  -- called when player clicks on the "Done" button
    if not diceRolled then return end
    local player = cards2Zones[card.getGUID()]
    if not checkIfActivePlayedPiece(player) then return false end  -- can't end until played or marked penalty
    --print('Player ', player, ' clicked ready.' )
    boards[player].buttons:remove('ready')
    readyCount = readyCount + 1 -- increment GLOBAL for how many players have clicked Ready
    local markers = scriptingZones[player].getObjects()
    for _, m in ipairs(markers) do m.setLock(true) end
    boards[player]:clearSavedStates()
    if readyCount >= playerCount then endTurn() end
end

---========= MARKUP -- highlighting squares and so on --========

function highlightSquares(paramsIn) -- requires at least table of squares = {{card=n, row=n, col=n}, ... }
    assert(paramsIn.squares, 'highlightSquares requires array params.squares = {{card=n, row=n, col=n}, ... }')
    local defaults = {size=1.1, color='Red', thickness=0.15}
    local params = mergeTables(defaults, paramsIn)
    local squares = params.squares
    --pdump(params.squares, 'Squares')
    if #squares < 1 then return end
    for _, sq in ipairs(squares) do
        params.pos = rowCol2Pos(sq.card, sq.row, sq.col)
        Markup:draw(params)
    end
end

function lineThroughSquares(paramsIn) -- requires at least squares = {{card=n, row=n, startCol=n, endCol=n}, ... }
    local defaults = {size=2, color='Grey', thickness=0.2}
    local params = mergeTables(defaults, paramsIn)
    for _, sq in ipairs(params.squares) do
        params.shape = 'line'
        params.start = rowCol2Pos(sq.card, sq.row, sq.startCol-0.45)
        params['end'] = rowCol2Pos(sq.card, sq.row, sq.endCol+0.45)
        --print('\nLn params=', dump(params))
        Markup:draw(params)
    end
end

function markBlockedSquares(paramsIn)
    local params = copyTable(paramsIn) or {}
    for _, player in ipairs(activeCards) do
        local board = boards[player]
        for row=1, 4 do
           	 for col=1, 12 do
                if board.blocked[row][col] then
                    params.squares={{card=player, row=row, startCol=col, endCol=col}}
                    lineThroughSquares(params)
                end
            end
        end
    end
end

function markOKSquares(paramsIn)
    local params = copyTable(paramsIn) or {}
    for _, player in ipairs(activeCards) do
        local board = boards[player]
        if board.showHints then
            params.squares = {}
            for row=1, 4 do
                for _, col in ipairs(board.ok[row].cols) do
                    table.insert(params.squares, {card=player, row=row, col=col})
                end
            end
            highlightSquares(params)
        end
    end
end


---======== virtual Boards ============--------

Board = {
    player = 'default',
    boxes = { {}, {}, {}, {}},
    penalties = 0,
}

function Board:new(player)
    local obj = {}
    setmetatable(obj,self)
    self.__index = self
    obj.player = player
    obj.boxes = { {}, {}, {}, {}}
    obj.blocked = {{[11]=true, [12]=true},{[11]=true, [12]=true},{[11]=true, [12]=true},{[11]=true, [12]=true}}
    obj.rowMax = {0,0,0,0}
    obj.saved = {}
    obj.showHints = false
    obj.lastMarker = {}
    obj.markedThisTurn = 0
    obj.penaltyThisTurn = 0
    obj.card = cards[player]  -- the "physical" scorecard visible on table
    obj.buttons = ButtonArray:new({targetObject = obj.card, defaults={width = 2000, height = 1000, font_size = 700,
            color = {0.5,0,0.5}, font_color = {1,1,1} }})
    assert(obj.buttons.defaults.font_size == 700)
    return obj
end

function Board:saveState()
-- we have to be able to save and restore because a player may change their mind and move
-- or remove a marker. So before making all the changes invoked by a new marker placement,
-- we save all the needed state information. The previous markers will also be locked so that
-- only the latest marker can be removed. If it is removed, then the state is restored.
    --print('saving state')
    local save = {}
    save.blocked = copyTable(self.blocked)
    save.rowMax = copyTable(self.rowMax)
    save.boxes = copyTable(self.boxes)
    save.ok = copyTable(self.ok)
    save.lastMarker = copyTable(self.lastMarker)
    save.penalties = self.penalties
    save.penaltyThisTurn = self.penaltyThisTurn
    save.markedThisTurn = self.markedThisTurn
    save.usedWhiteFirst = self.usedWhiteFirst
    table.insert(self.saved, save)
end

function Board:clearSavedStates()
    self.saved = {}
    self.lastMarker = {} -- "freeze" state, so can't move last marker any longer.
    self.markedThisTurn = 0
    self.penaltyThisTurn = 0
end

function Board:restoreState()
    local save = table.remove(self.saved)
    if save == nil then return end
    for k, v in pairs(save) do
        self[k] = v
    end
    if self.lastMarker.obj then
        self.lastMarker.obj.setLock(false) -- since it's now the last, so free to be moved
    end
    analyzeAndMark()
end

function Board:exitingMarker(obj)  -- if the object exiting zone is the last (and only unlocked) piece, then restore
    local last = self.lastMarker.obj
    if last == nil then return end
    if obj.getGUID() == last.getGUID() then self:restoreState() end
end


function Board:dump()
    print('\nBoard =')
    print('Boxes=', dump(self.boxes))
    print('rowMax=', dump(self.rowMax))
    s = 'Blocked boxes'
    for row = 1, 4 do
        s = s .. ', row ' .. row .. ': {'
        for i=1, 12 do
            if self.blocked[row][i] then s = s .. i .. ', ' end
        end
        s = s .. '}'
    end
    if self.lastMarker.obj then
        print('Lastmarker obj =', self.lastMarker.obj.getGUID())
    else
        print('Lastmarker obj = nil')
    end
    print('Penalties =', self.penalties)
    print('There are ', #self.saved, ' saved states.')
    print(bbcodes.White, s)
    printChoices(self.ok)
end

function makeBoards()  -- make 8 virtual player boards for keeping the data
    -- make all the boards even though we may not use them all
    for i = 1, 8 do
        table.insert(boards, Board:new(i))
    end
end

function Board:addPenalty(obj)
  self:saveState()  -- in case we have to undo
  self.lastMarker.obj=obj
  self.penalties = self.penalties + 1
  self.penaltyThisTurn = 1
  if self.penalties > 3 then
    gameOver = true
  end
end

function Board:setBox(row, col, obj) -- selected row and column, object that was dropped
  --print(row, ', ', col, ', ', obj)
  local player = self.player
  local chosenNumber = col2N[row][col]
  --print('Marking (' .. row .. ', ' .. col .. ') = ' .. row2Color[row] .. ' ' .. chosenNumber )
  local max = self.rowMax[row]
  local okDrop = (self.markedThisTurn < 2)  -- can never drop more than two markers
  if (self.markedThisTurn > 0) and (self.player ~= activePlayer) then okDrop = false end
  if (self.markedThisTurn > 0) and (self.player == activePlayer) and not self.usedWhiteFirst then
      okDrop = false
  end
  if (col==12) and (self.rowMax[row]==11) and (locked[row]==false or locked[row]=='pending') then
      -- this allows locking markers to be dropped as long as row is unblocked AND
      -- the player has already played the 12 (col==11)
      okDrop = true
  end
  if okDrop == false then
      printMessage(player, "Can't add more markers on this turn", {duration=3, width=8000, font_size=450})
      --print('MarkedThisTurn =', self.markedThisTurn, ', usedWhiteFirst=', self.usedWhiteFirst)
      return false
  end
  if (col < 1) or (col > 12) then
          printMessage(player, 'Try again', {duration=2})
      return false
  end
  if (row < 1) or (row > 4) then
      printMessage(player, 'Try again', {duration=2})
      return false
  end
  --print('max=' .. max .. ', adding ' .. col)
  if locked[row]==true then
    printMessage(player,"Can't do that because\nthe row is locked", {duration=3, font_size=500})
    return false
  end
  -- can't lock color unless there are already 5 on row
  if (col > 10) then
    if self:rowCount(row)<5 then
      printMessage(player, "Can't lock row until you have\nat least 5 numbers marked",
        {duration=3, font_size=450, width=8000})
      return false
    else
      lockRow(row)
    end
  end
  if col <= max then
    printMessage(player, "Can't mark column to left of a marker",
            {duration=3, font_size=450, width=8000})
    return false
  else
    if not self.ok[row].bool[col] then
        printMessage(player, "Not a valid choice", {duration=2, font_size=550})
        return false
    end
    -- finally -- everything is OK and we can set the chosen box
    self:saveState()  -- in case we have to undo
    self.markedThisTurn = self.markedThisTurn + 1
    table.insert(self.boxes[row], col) -- mark the selected box
    self:setBlocked(row, col) -- block lower columns
    self.rowMax[row] = col
    if self.lastMarker.obj then
        self.lastMarker.obj.setLock(true) -- lock previous
        self.lastMarker.obj.highlightOff() -- and unhighlight it
    end
    -- :-( It's bad practice to have the virtual Boards manipulating the "real" objects,
    -- so consider delegating that back to another function
    self.lastMarker.obj=obj
    obj.highlightOn('Yellow')
    -- special for activePlayer
    if self.player == activePlayer then
        self.usedWhiteFirst = usingWhiteDice(chosenNumber) -- this play used white dice, so another turn is OK
        self:calculateOK(allDice.results)
    end
    if col == 11 then
        marker = spawnMarker(player)
        marker.setColorTint(row2Color[row])
        self.ok[row].bool[12] = true
        printMessage(player, 'Place marker on lock!',
            {color='Green', duration=3, width=8000})
    end
    analyzeAndMark()
    return true
  end
end
--bx = boards[1]
--pdump(bx.ok[2])
-- Given a newly marked box (row, col),
--  a) block the boxes between last mark and this one
--  b) if there are 5 or more marked, then open 11 and 12 for play
function Board:setBlocked(row,col)
    local currentMax = self.rowMax[row]
    if col - currentMax > 1 then
        for c = currentMax+1, col-1 do
          self.blocked[row][c] = true
        end
    end
    --printNotes('setBlocked: col=' .. col .. ', rowMax=' .. currentMax .. ', rowcount=' .. self:rowCount(row))
    if self:rowCount(row) > 4 then  -- unblock last boxes
      self.blocked[row][11]=false
      self.blocked[row][12]=false
    end
end


-- remove mark/selection of a box
-- This shouldn't be needed if we delay marking until the player
-- selects "OK" to finalize choice.
function Board:clearBox(row, col)
  --print ('clearBox(' .. row .. ', ' .. col .. ')')
  assert((col > 0) and (col < 13), 'Trying to clear invalid col ' .. col)
  assert((row > 0) and (row < 5), 'Trying to clear invalid row ' .. row)
  local t = {}
  for i, j in ipairs(self.boxes[row]) do
    if j ~= col then table.insert(t, j) end
  end
  self.boxes[row] = t
  self.rowMax[row] = self.boxes[row][#self.boxes[row]]
  if col == 11 then self:clearBox(row, 12) end -- can't have lock without 11
end

-- count the number of marked/selected boxes in this row
function Board:rowCount(row)
  -- do something like this if you want to automatically add the lock
  -- if self.rowMax[row] == 11 then
  --   table.insert(self.boxes[row], 12)
  --   self.rowMax[row] = 12
  -- end -- auto "lock" credit
  return #self.boxes[row]
end

-- score the board, return table of score:
--  {row1, row2, row3, row4, penalty points, total}
function Board:score()
  local scores = {}
  local sum = 0
  for row = 1, 4 do
    local thisrow = scoreTable[self:rowCount(row)+1] -- +1 since 0 is first entry in table
    table.insert(scores, thisrow)
    sum = sum + thisrow
  end
  table.insert(scores, self.penalties*5)
  sum = sum - self.penalties*5
  table.insert(scores, sum)
  return scores
end

-- lock row when a player selects last box
function lockRow(row)
  print ('Row ' .. row .. ' will be locked!')
  locked[row] = 'pending'
  --actual lock must wait until all players have finalized
end

function checkLocked()
    local lockedCount = 0
    for i=1, 4 do

        if locked[i]=='pending' then
            locked[i] = true
            printNotes('Row ' .. i .. ' is  now blocked!')
            removeDie(i)
        end
        if locked[i] == true then lockedCount = lockedCount + 1 end
    end
    if lockedCount > 1 then gameOver=true end
    --print('lockedCount=', lockedCount, ', gameOver=', gameOver)
end

function removeDie(n) -- remove die for row n
    local blockedDie = allDice:remove(row2Color[n] .. ' die')
    blockedDie.ttsdie.setPosition(Vector(0,-5,0))
    blockedDie.ttsdie.setLock(true)
end

function initBoardConstants()
    -- convert (row, col) to number with col2N[row][col]
    -- convert (row, n) to col with n2Col[row][n]
    row2Color = {'Red', 'Yellow', 'Green', 'Blue'}
    rows={Red=1, Yellow=2, Green=3, Blue=4}
    col2NAsc = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'Lock'}
    col2NDesc = {12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 'Lock'}
    col2N = {col2NAsc, col2NAsc, col2NDesc, col2NDesc}
    n2ColAsc = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}
    n2ColDesc = {0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
    n2Col = {n2ColAsc, n2ColAsc, n2ColDesc, n2ColDesc}
end
--print(bbcodes.Red, "****")

function Board:myTurn()
    return self.player == activePlayer
end

function Board:calculateOK(rolls)
-- n2Col[row][n] gives column for value n in row 1-4
-- rows[color] gives right row for color
-- n2Col[rows[color]][n] gives column for value n in color row
-- col2N[row][col] gives number value of row,col
-- row2Color[row] gives color of row
  if rolls == nil then return end
  self.ok = { {bool={}, cols={}, min=99 },
               {bool={}, cols={}, min=99 },
               {bool={}, cols={}, min=99 },
               {bool={}, cols={}, min=99 }
           }
  local col, sum
  -- whitesum can be played by anyone but NOT as second move for activePlayer
  if self.markedThisTurn == 0 then  -- == 0 when called before a piece is placed
      --print('USING WHITE SUM')
      local whiteSum = rolls.White[1] + rolls.White[2]
      for row = 1, 4 do  -- check which rows
        col = n2Col[row][whiteSum]
        if col > self.rowMax[row] then
          self:setOK(row, col)
        end
      end
  end
  if (self.markedThisTurn > 0) and (not self.usedWhiteFirst) then return end
        -- if white dice were not used first, then no moves are available
  for row = 1, 4 do  -- mark the lock square as OK if row complete
      if (self.rowMax[row] == 11) and (locked[row]=='pending' or locked[row]==false) then
          self:setOK(row,12)  -- mark the lock square as OK if row complete
      end
  end
  if self:myTurn() then -- check combos of color & white
    for _, color in ipairs{'Red', 'Yellow', 'Green', 'Blue'} do
        local val = rolls[color]
        if val then  -- if that color dice was rolled
          row = rows[color]
          for _, white_n in ipairs(rolls.White) do
            sum = val + white_n
            col = n2Col[rows[color]][sum]  -- target col
            if col > self.rowMax[row] then
              self:setOK(row, col)
            end
          end
        end
    end
  end
  -- table ok should now have all pairs of valid {row, col} which are valid for the given dice roll and board state
end

-- not sure we need this now with the 'blocked' table
function Board:setOK(row, col)
  -- in okTable, mark row/col as valid choice
  -- but don't OK col 11 unless there are already 5 on row
  local t = self.ok[row] -- focusing on just this row
  if not t.bool[col] then
    if (col < 11) or (self:rowCount(row) > 4) then
      t.bool[col] = true
      table.insert(t.cols, col)
      if t.min > col then t.min = col end
    end
  end
end

function Board:attachButton(button)
--pdump(button, 'Adding button')
    self.buttons:add(button)
end

function printChoices(ok)
-- print or string the ok array of possible moves
  local num, color
  for row = 1, 4 do
    t = ok[row]
    color = row2Color[row]
    for _, col in ipairs(t.cols) do  -- valid spots (col) in row
      num = col2N[row][col]
      if col == t.min then emp = '**' else emp= '' end
      print(emp .. color .. '-' .. num)
    end
  end
end

function Board:messageButton(message, params)
-- write message on a button on player's board; optionally make it disappear in params.duration seconds
-- Otherwise it remains until clicked on
    local defaults = {click_function='closeMessage', height=3000, width=5000, font_size=600, color={0,0, 0.5},
            position={0,6,-5}, rotation={-25,0,0}}
    local b = Button:new('message', mergeTables(defaults, params))
    b.params.label = message
    self.buttons:add(b)
    if params and params.duration then
        Wait.time(function() self.buttons:remove('message') end, params.duration)
    end
end

function playerMessageButton(n, message, params)  -- just calls messageButton on player n's board
    local board = boards[n]
    --print ('n=', n, ', message=', message, ', board=', board)
    board:messageButton(message, params)
end


function closeMessage(card)
    local board = card2Board(card)
    board.buttons:remove('message')
end




-------============== MARKERS/TOKENS ================------------------

function spawnMarker(c)  -- spawn for player c
    params =    {
                sound = true,
                type = 'go_game_piece_black',
                position = markerHome(c),
                }
    obj = spawnObject(params)
    return obj
end

function spawnMarkerOnLock(p, row)
-- works but not used; would have to also make override to let the object enter
-- scripting zone without getting kicked out
    params =    {
                sound = true,
                type = 'go_game_piece_black',
                position=rowCol2Pos(p, row, 12) + Vector(0,2,0)
                }
    spawnObject(params)
end

function markerHome(c)
    --printPosition(toWorld(Vector(17, 3 , -2), c), 'pos=')
    return toWorld(Vector(17, 3 , -2), c)
end

function spawnMarkers()
    params =    {
                sound = true,
                type = 'go_game_piece_black',
                }
    for _, c in ipairs(activeCards) do
        params.position = markerHome(c)
        spawnObject(params)
    end
    --print('activePlayer=', activePlayer)
    -- spawn an extra piece for the active player
    params.type = 'go_game_piece_white'
    params.position = markerHome(activePlayer) + Vector(1, 0.5, 0)
    spawnObject(params)
end
