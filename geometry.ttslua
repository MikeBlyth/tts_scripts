---------- COORDINATE SYSTEMS ===============================

CoordSys = {__class="CoordSys",}

function CoordSys:new(worldOffset, worldRotation) -- (vector, degrees rotation on y axis)
-- Generate a coordinate system, just an origin and angle relative to the game origin and orientation
  local obj = {origin=Vector(worldOffset or {0,0,0}), rotation=worldRotation or 0}
  setmetatable(obj, self)
  self.__index = self
  self.__tostring=self.tostring
  return obj
end
CoordSys.global = CoordSys:new({0,0,0},0)


function CoordSys.tostring(c)
  local x = fmt2(c.origin.x)
  local y = fmt2(c.origin.y)
  local z = fmt2(c.origin.z)
  local rot = math.floor(c.rotation+0.5)
  return "CoordSys {origin=" .. "(" .. x .. ', ' .. y ..  ', ' .. z .. '), rot=' .. c.rotation .. '}'
end

function CoordSys.subtract(a, b)
  -- return new CoordSys representing the difference
  local origin_diff = subtractVector(a.origin, b.origin)
  local rot_diff = a.rotation - b.rotation
  return CoordSys:new(origin_diff, rot_diff)
end
CoordSys.__sub = CoordSys.subtract

function CoordSys:isGlobal()
  result = true
  for _,v in ipairs ({self.origin[1], self.origin[2], self.origin[3], self.rotation}) do
     if v ~= 0 then result = false end
  end
  return result
end

-----------======================================  POINTS ====

Point = {__class='Point'}

--- a Point needs to be a subclass of a vector. For now, acccomplish that just by making it
--- a vector with extra fields, and add methods to the Vector class.
--- (For testing outside TTS, we have to use the Vec class instead of Vector, since the "Vector()"
---  method is a generator for the Vector class).

function Point:new(v, coordSys)
  assert(type(v)=='table' and (v[1] or v[x]) and (v[2] or v[y]) and (v[3] or v[z]),
    "Point:new requires vector and optional coordinate system")
  local obj = Vector(v)
  obj.coordSys = coordSys or CoordSys.global
  return obj
end

-- NOT functional at this point
-- function Point.tostring(p, withCoords)
--   if p == nil then return 'nil' end
--   local s =  '(' .. fmt2(p[1]) .. ', ' .. fmt2(p[2]) .. ', ' .. fmt2(p[3]) .. ')'
--   if withCoords then
--     s = s .. ', ' .. CoordSys.tostring(p.coordSys)
--   end
--   return s
-- end

-----!!!!!!!------ MUST CHANGE Vec: to Vector when importing to TTS !!!!!!!!!!! ----------
function Vector:rotate2D(angle)  -- make Point:rotate2D if using multiple inheritance from Point & Vector
  local newVector = vRotate2D(self, angle)
  return Point:new(newVector, self.coordSys)
end

-- function Point:toVector()
--   return Vector(self[1], self[2], self[3])
-- end

-----!!!!!!!------ MUST CHANGE Vec: to Vector when importing to TTS !!!!!!!!!!! ----------
function Vector:toLocal(coordSys)  -- point must start as global
-- return a new point representing original point with new coord system
  assert((self.coordSys==nil or self.coordSys:isGlobal()))
  local newCoordSys = coordSys or CoordSys.global
  local coordDiff = CoordSys.global - newCoordSys
  local reOrigin = Vector(self) + coordDiff.origin
  local rotated = reOrigin:rotate(coordDiff.rotation)
  return Point:new(rotated, newCoordSys)
end

-----!!!!!!!------ MUST CHANGE Vec: to Vector when importing to TTS !!!!!!!!!!! ----------
function Vector:toGlobal()
-- return a new point representing original point with new coord system
  local origCoordSys = self.coordSys or CoordSys.global
  local rotated = Vector(self):rotate(origCoordSys.rotation)
  local reOrigin = rotated + self.coordSys.origin
  return Point:new(reOrigin, newCoordSys)
end

-----!!!!!!!------ MUST CHANGE Vec: to Vector when importing to TTS !!!!!!!!!!! ----------
function Vector:rebase(coordSys)
-- return a new point representing original point with new coord system
  local newCoordSys = coordSys or CoordSys.global
  local global = self:toGlobal()
  local newLocal = global:toLocal(newCoordSys)
  return Point:new(newLocal, newCoordSys)
end

-----------========== POLYGONS =========================

Polygon = {__class='Polygon'}

function Polygon:new(p)
  local obj = {}
  setmetatable(obj, self)
  self.__index = self
  self.__tostring = self.tostring
  local defaults = {sides=4, radius = 1, center=Vector(0,0,0), yrotation=0, coordSys=CoordSys.global }
  local params = mergeTables(defaults, p or {})
  local center = params.center
  local angle = params.yrotation
  local r = params.radius
  local delta_angle = 2*math.pi/params.sides
  local points = {}
  local x, z
  local y = center[2]
  obj.coordSys = params.coordSys
  obj.center = params.center
  for i=0, params.sides-1 do
    x = math.cos(angle) * r + center.x
    z = math.sin(angle) * r + center.z
    table.insert(points, Point:new({x,y,z}, params.coordSys))
    angle = angle + delta_angle
  end
  obj.points = points
  return obj
end

function Polygon.tostring(p)
  local s = 'Polygon ' .. #p.points .. ' = '
  local points = p.points
  for _, v in ipairs(points) do
    s = s .. '(' .. fmt2(v[1]) .. ', ' .. fmt2(v[2]) .. ', ' .. fmt2(v[3]) .. '), '
  end
  return s
end

function Polygon.square(p)
  local defaults = {size= 1}
  local params = mergeTables(defaults, p or {})
  params.sides = 4
  params.radius = params.size * math.sqrt(2) / 2
  params.yrotation = params.yrotation or math.pi/4
  return Polygon:new(params)
end

function Polygon:rebase(coordSys)
  local obj = Polygon:new({sides=0})
  obj.points={}
  obj.coordSys = coordSys or CoordSys.global
  obj.center = self.center
  for _, p in ipairs(self.points) do
    table.insert(obj.points, p:rebase(coordSys))
  end
  return obj
end

---------============= GRIDS ===============
-- Grids are 1-3D evenly-spaced arrays of points.
-- For example, create a 2D array based at (3,4,5) with 5 columns and 4 rows:
-- g1 = Grid:new({origin=Vector(3,4,5), rows=4, cols=5, spacing=(2.5,0,2.8)})
-- This will give row/column positions based on those parameters with row[1], column[1]
--   being at the origin, row[2],column[2] being one spacing unit (vector) away, and so on.
-- Then Grid:posToRowCol(pos) will return a 3D table for row, column, layer
--      Grid:rowColToPos(row, col, layer) does the opposite, returning a position from the row/col/layer
-- Currently, plain Vectors are used and not Point class variables, which include the CoordSys.
--
Grid = {__class='Grid'}

function Grid:new(p)
  local obj = {spacing = Vector(2,2,2), origin=Vector(0,0,0), coordSys=CoordSys.global, rows=1, cols=1, layers=1}
  setmetatable(obj, self)
  self.__index = self
  self.__tostring = self.tostring
  if p then
    for k, v in pairs(copyTable(p)) do
      obj[k] = v
    end
  end
  obj.rowZs = {}
  obj.colXs = {}
  obj.layerYs = {}
  for i = 0, obj.rows-1 do
    table.insert(obj.rowZs, obj.origin.z + obj.spacing.z*i)
  end
  for i = 0, obj.cols-1 do
    table.insert(obj.colXs, obj.origin.x + obj.spacing.x*i)
  end
  for i = 0, obj.layers-1 do
    table.insert(obj.layerYs, obj.origin.y + obj.spacing.y*i)
  end
  return obj
end

function Grid:generatePoints() -- not really needed for anything since accessing the points is
  -- no easier than just using rowColToPos(row,col,layer)
  self.points = {}
  for layer= 1, self.layers do
    local layerPoints = {}
    for r = 1, self.rows do
      local rowPoints = {}
      for c = 1, self.cols do
        table.insert(rowPoints, Vector(self.colXs[c], self.layerYs[layer], self.rowZs[r]))
        -- one column in this row
      end
      table.insert(layerPoints, rowPoints) -- one row in this layer
    end
    table.insert(self.points, layerPoints) -- this is a whole layer
  end
  return self.points
end

function Grid:generatePointsFlat() -- just a flat array of all the points in the grid
  self.pointsFlat = {}
  for layer= 1, self.layers do
    for r = 1, self.rows do
      for c = 1, self.cols do
        table.insert(self.pointsFlat, Vector(self.colXs[c], self.layerYs[layer], self.rowZs[r]))
      end
    end
  end
  return self.pointsFlat
end

function Grid:posToRowCol(position, strict) -- strict defaults to true, returns nil if out of bounds
  pos = position
  if not pos.__isVector then
    assert(type(pos)=='table', 'posToRowCol requires vector or table convertable to vector')
    pos = Vector(position)
  end
  local offset = pos - self.origin + self.spacing*0.5
  local col = math.floor(offset.x/self.spacing.x) + 1
  local row = math.floor(offset.z/self.spacing.z) + 1
  local layer = math.floor(offset.y/self.spacing.y) + 1
  if strict==nil then strict=true end  -- makes strict-true the default
  if strict then
    if row>self.rows or col>self.cols or row<1 or col<1
      or layer>self.layers or layer<1 then return nil end
    if self.triangle and col>row then return nil end -- outside bounds of triangle where for given row, cols = [1..row]
  end
  return {row, col, layer}
end

function Grid:rowColToPos(row, col, layer)
  local layer = layer or 1
  if row>self.rows or col>self.cols or row<1 or col<1
    or layer>self.layers or layer<1 then return nil end
  return Vector(self.colXs[col], self.layerYs[layer], self.rowZs[row])
end

TriangularGrid = Grid:new({__class='TriangularGrid'})

function TriangularGrid:new(p)
  if p then
    assert(p.rows==nil or p.cols==nil or p.rows==p.cols,
      'Cannot specify different rows and columns in triangle--use one or the other.')
  end
  local params = copyTable(p)
  params.cols = p.cols or p.rows
  params.rows = p.rows or p.cols
  local obj = Grid:new(params)
  setmetatable(obj, self)
  self.__index = self
  self.__tostring = self.tostring
  self.triangle = true
  return obj
end

function TriangularGrid:generatePointsFlat()
-- This one will make points in this pattern:
-- xxx
-- xx
-- x
-- which should be OK for any required configuration if started from the right corner
  local colsInRow = 0
  self.pointsFlat = {}
  for layer=1, self.layers do
    for r=1, self.rows do
      colsInRow = colsInRow + 1
      for c = 1, colsInRow do
        table.insert(self.pointsFlat, Vector(self.colXs[c], self.layerYs[layer], self.rowZs[r]))
      end
    end
  end
  return self.pointsFlat
end
